name: Release

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Run tests
        run: go test -v ./...

      - name: Build
        run: go build -v ./...

  release:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      repository-projects: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Release Please
        uses: googleapis/release-please-action@v4
        id: release
        with:
          release-type: go
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Auto-merge Release PR
        if: steps.release.outputs.pr
        run: |
          PR_NUMBER=$(echo '${{ steps.release.outputs.pr }}' | jq -r '.number')
          echo "Release PR created: #${PR_NUMBER}"
          echo "Auto-merging release PR #${PR_NUMBER}"
          
          # First, try to enable auto-merge
          if gh pr merge ${PR_NUMBER} --auto --squash --delete-branch; then
            echo "‚úÖ Auto-merge enabled successfully"
            
            # Wait for auto-merge to complete (with timeout)
            echo "‚è≥ Waiting for auto-merge to complete..."
            timeout=300  # 5 minutes timeout
            elapsed=0
            interval=10
            
            while [ $elapsed -lt $timeout ]; do
              if gh pr view ${PR_NUMBER} --json state --jq '.state' | grep -q "MERGED"; then
                echo "‚úÖ PR successfully merged via auto-merge"
                exit 0
              elif gh pr view ${PR_NUMBER} --json state --jq '.state' | grep -q "CLOSED"; then
                echo "‚ùå PR was closed without merging"
                exit 1
              fi
              
              echo "‚è≥ Still waiting... (${elapsed}s elapsed)"
              sleep $interval
              elapsed=$((elapsed + interval))
            done
            
            echo "‚ö†Ô∏è Auto-merge timed out after ${timeout}s, attempting manual merge..."
          else
            echo "‚ö†Ô∏è Auto-merge failed, attempting manual merge..."
          fi
          
          # Fallback: Try manual merge
          echo "üîÑ Attempting manual merge..."
          max_retries=3
          retry_count=0
          
          while [ $retry_count -lt $max_retries ]; do
            if gh pr merge ${PR_NUMBER} --squash --delete-branch; then
              echo "‚úÖ Manual merge successful"
              exit 0
            else
              retry_count=$((retry_count + 1))
              echo "‚ùå Manual merge attempt ${retry_count} failed"
              if [ $retry_count -lt $max_retries ]; then
                echo "‚è≥ Waiting 30s before retry..."
                sleep 30
              fi
            fi
          done
          
          echo "‚ùå All merge attempts failed"
          echo "üìã PR Status:"
          gh pr view ${PR_NUMBER} --json mergeable,mergeStateStatus,statusCheckRollup
          exit 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Release Created
        if: steps.release.outputs.release_created
        run: |
          echo "üéâ Release ${{ steps.release.outputs.tag_name }} created!"
          echo "Release URL: ${{ steps.release.outputs.html_url }}" 